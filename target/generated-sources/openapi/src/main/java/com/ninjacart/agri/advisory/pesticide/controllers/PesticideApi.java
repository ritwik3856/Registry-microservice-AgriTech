/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ninjacart.agri.advisory.pesticide.controllers;

import com.ninjacart.agri.advisory.pesticide.models.Pesticide;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-02-21T18:37:48.291952+05:30[Asia/Kolkata]")
@Validated
@Tag(name = "pesticide", description = "the pesticide API")
public interface PesticideApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/v1/{toolID}/realm/{realmId}/user/{userId}/pesticides : Add a new pesticide
     *
     * @param realmId  (required)
     * @param userId  (required)
     * @param toolID  (required)
     * @param pesticide  (required)
     * @return Pesticide Added (status code 200)
     */
    @Operation(
        operationId = "addPesticide",
        summary = "Add a new pesticide",
        tags = { "pesticide" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Pesticide Added", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Pesticide.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/{toolID}/realm/{realmId}/user/{userId}/pesticides",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Pesticide> addPesticide(
        @Parameter(name = "realmId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("realmId") String realmId,
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") Integer userId,
        @Parameter(name = "toolID", description = "", required = true, in = ParameterIn.PATH) @PathVariable("toolID") String toolID,
        @Parameter(name = "Pesticide", description = "", required = true) @Valid @RequestBody Pesticide pesticide
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"benefits\" : \"benefits\", \"pesticideType\" : \"pesticideType\", \"dosagePerAcre\" : \"dosagePerAcre\", \"hashId\" : \"hashId\", \"updatedByToolId\" : \"updatedByToolId\", \"pesticideTypeId\" : 2, \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"is_deleted\" : false, \"costOfSingleDosage\" : 5, \"dosagePerLitre\" : \"dosagePerLitre\", \"price\" : 5, \"id\" : 0, \"brand\" : \"brand\", \"urlStr\" : \"urlStr\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"extraDescription\" : \"extraDescription\", \"updatedBy\" : 1, \"quantity\" : \"quantity\", \"applicationFrequency\" : \"applicationFrequency\", \"createdByToolId\" : \"createdByToolId\", \"versionId\" : 7, \"chemicalComposition\" : \"chemicalComposition\", \"specialRemarks\" : \"specialRemarks\", \"form\" : \"form\", \"createdBy\" : 6, \"spectrum\" : \"spectrum\", \"name\" : \"name\", \"applicationMethod\" : \"applicationMethod\", \"effectDuration\" : \"effectDuration\", \"compatibility\" : \"compatibility\", \"img1\" : \"img1\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/{toolID}/realm/{realmId}/user/{userId}/pesticides/{id} : Delete a specific pesticide by ID
     *
     * @param realmId  (required)
     * @param userId  (required)
     * @param toolID  (required)
     * @param id  (required)
     * @return Deleted Successfully (status code 204)
     */
    @Operation(
        operationId = "deletePesticideById",
        summary = "Delete a specific pesticide by ID",
        tags = { "pesticide" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Deleted Successfully")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/{toolID}/realm/{realmId}/user/{userId}/pesticides/{id}"
    )
    
    default ResponseEntity<Void> deletePesticideById(
        @Parameter(name = "realmId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("realmId") String realmId,
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") Integer userId,
        @Parameter(name = "toolID", description = "", required = true, in = ParameterIn.PATH) @PathVariable("toolID") String toolID,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/{toolID}/realm/{realmId}/user/{userId}/pesticides/{id} : Get a specific pesticide by ID
     *
     * @param realmId  (required)
     * @param userId  (required)
     * @param toolID  (required)
     * @param id  (required)
     * @return Successful response (status code 200)
     */
    @Operation(
        operationId = "getPesticideById",
        summary = "Get a specific pesticide by ID",
        tags = { "pesticide" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Pesticide.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/{toolID}/realm/{realmId}/user/{userId}/pesticides/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Pesticide> getPesticideById(
        @Parameter(name = "realmId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("realmId") String realmId,
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") Integer userId,
        @Parameter(name = "toolID", description = "", required = true, in = ParameterIn.PATH) @PathVariable("toolID") String toolID,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"benefits\" : \"benefits\", \"pesticideType\" : \"pesticideType\", \"dosagePerAcre\" : \"dosagePerAcre\", \"hashId\" : \"hashId\", \"updatedByToolId\" : \"updatedByToolId\", \"pesticideTypeId\" : 2, \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"is_deleted\" : false, \"costOfSingleDosage\" : 5, \"dosagePerLitre\" : \"dosagePerLitre\", \"price\" : 5, \"id\" : 0, \"brand\" : \"brand\", \"urlStr\" : \"urlStr\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"extraDescription\" : \"extraDescription\", \"updatedBy\" : 1, \"quantity\" : \"quantity\", \"applicationFrequency\" : \"applicationFrequency\", \"createdByToolId\" : \"createdByToolId\", \"versionId\" : 7, \"chemicalComposition\" : \"chemicalComposition\", \"specialRemarks\" : \"specialRemarks\", \"form\" : \"form\", \"createdBy\" : 6, \"spectrum\" : \"spectrum\", \"name\" : \"name\", \"applicationMethod\" : \"applicationMethod\", \"effectDuration\" : \"effectDuration\", \"compatibility\" : \"compatibility\", \"img1\" : \"img1\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/{toolID}/realm/{realmId}/user/{userId}/pesticides/{id} : Update a specific pesticide by ID
     *
     * @param realmId  (required)
     * @param userId  (required)
     * @param toolID  (required)
     * @param id  (required)
     * @param pesticide  (required)
     * @return Successful update (status code 200)
     */
    @Operation(
        operationId = "updatePesticideById",
        summary = "Update a specific pesticide by ID",
        tags = { "pesticide" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful update", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Pesticide.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/{toolID}/realm/{realmId}/user/{userId}/pesticides/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Pesticide> updatePesticideById(
        @Parameter(name = "realmId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("realmId") String realmId,
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") Integer userId,
        @Parameter(name = "toolID", description = "", required = true, in = ParameterIn.PATH) @PathVariable("toolID") String toolID,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "Pesticide", description = "", required = true) @Valid @RequestBody Pesticide pesticide
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"benefits\" : \"benefits\", \"pesticideType\" : \"pesticideType\", \"dosagePerAcre\" : \"dosagePerAcre\", \"hashId\" : \"hashId\", \"updatedByToolId\" : \"updatedByToolId\", \"pesticideTypeId\" : 2, \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"is_deleted\" : false, \"costOfSingleDosage\" : 5, \"dosagePerLitre\" : \"dosagePerLitre\", \"price\" : 5, \"id\" : 0, \"brand\" : \"brand\", \"urlStr\" : \"urlStr\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"extraDescription\" : \"extraDescription\", \"updatedBy\" : 1, \"quantity\" : \"quantity\", \"applicationFrequency\" : \"applicationFrequency\", \"createdByToolId\" : \"createdByToolId\", \"versionId\" : 7, \"chemicalComposition\" : \"chemicalComposition\", \"specialRemarks\" : \"specialRemarks\", \"form\" : \"form\", \"createdBy\" : 6, \"spectrum\" : \"spectrum\", \"name\" : \"name\", \"applicationMethod\" : \"applicationMethod\", \"effectDuration\" : \"effectDuration\", \"compatibility\" : \"compatibility\", \"img1\" : \"img1\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
