/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ninjacart.agri.advisory.crop.controllers;

import com.ninjacart.agri.advisory.crop.models.CropDetails;
import java.util.Map;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-02-21T18:37:47.953428+05:30[Asia/Kolkata]")
@Validated
public interface CropDetailsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/v1/{toolID}/realm/{realmId}/user/{userId}/cropsdetails : Add a new cropdetails
     *
     * @param realmId  (required)
     * @param userId  (required)
     * @param toolID  (required)
     * @param cropDetails  (required)
     * @return CropDetails Added (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/{toolID}/realm/{realmId}/user/{userId}/cropsdetails",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CropDetails> addCropDetails(
         @PathVariable("realmId") String realmId,
         @PathVariable("userId") Integer userId,
         @PathVariable("toolID") String toolID,
         @Valid @RequestBody CropDetails cropDetails
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"income\" : \"income\", \"inputCost\" : \"inputCost\", \"lastUpdatedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"machinesRequired\" : \"machinesRequired\", \"approvedBy\" : 2, \"description\" : \"description\", \"updatedByToolId\" : \"updatedByToolId\", \"reviewerRemarks\" : \"reviewerRemarks\", \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"sowingMethod\" : \"sowingMethod\", \"revenue\" : \"revenue\", \"id\" : 0, \"isApproved\" : 3, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"cropId\" : 5, \"updatedBy\" : 1, \"realmId\" : \"realmId\", \"seedQuantity\" : \"seedQuantity\", \"fertilizers\" : \"fertilizers\", \"farmingRegions\" : \"farmingRegions\", \"seedProcurement\" : \"seedProcurement\", \"marketDemand\" : \"marketDemand\", \"diseases\" : \"diseases\", \"irrigationMethods\" : \"irrigationMethods\", \"published\" : true, \"authorId\" : 2, \"approvedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"unspsc\" : \"{}\", \"eppocode\" : \"{}\", \"createdByToolId\" : \"createdByToolId\", \"seedTypes\" : \"seedTypes\", \"weedManagement\" : \"weedManagement\", \"versionId\" : 7, \"soilPreparation\" : \"soilPreparation\", \"createdBy\" : 6, \"nutritionalDetails\" : \"nutritionalDetails\", \"parent_id\" : 9, \"name\" : \"name\", \"time\" : \"2000-01-23T04:56:07.000+00:00\", \"langId\" : 5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/{toolID}/realm/{realmId}/user/{userId}/cropdetails/{id} : Delete a specific cropdetails by ID
     *
     * @param realmId  (required)
     * @param userId  (required)
     * @param toolID  (required)
     * @param id  (required)
     * @return Deleted Successfully (status code 204)
     */
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/{toolID}/realm/{realmId}/user/{userId}/cropdetails/{id}"
    )
    
    default ResponseEntity<Void> deleteCropDetailsById(
         @PathVariable("realmId") String realmId,
         @PathVariable("userId") Integer userId,
         @PathVariable("toolID") String toolID,
         @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/{toolID}/realm/{realmId}/user/{userId}/cropdetails/udiSearch : Retrieve UDI Search Results
     *
     * @param realmId  (required)
     * @param userId  (required)
     * @param toolID  (required)
     * @return Successful response (status code 200)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/{toolID}/realm/{realmId}/user/{userId}/cropdetails/udiSearch",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Map<String, CropDetails>>> findCropDetailsUdi(
         @PathVariable("realmId") String realmId,
         @PathVariable("userId") Integer userId,
         @PathVariable("toolID") String toolID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ null, null ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/{toolID}/realm/{realmId}/user/{userId}/cropdetails/{id} : Get a specific cropdetails by ID
     *
     * @param realmId  (required)
     * @param userId  (required)
     * @param toolID  (required)
     * @param id  (required)
     * @return Successful response (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/{toolID}/realm/{realmId}/user/{userId}/cropdetails/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<CropDetails> getCropDetailsById(
         @PathVariable("realmId") String realmId,
         @PathVariable("userId") Integer userId,
         @PathVariable("toolID") String toolID,
         @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"income\" : \"income\", \"inputCost\" : \"inputCost\", \"lastUpdatedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"machinesRequired\" : \"machinesRequired\", \"approvedBy\" : 2, \"description\" : \"description\", \"updatedByToolId\" : \"updatedByToolId\", \"reviewerRemarks\" : \"reviewerRemarks\", \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"sowingMethod\" : \"sowingMethod\", \"revenue\" : \"revenue\", \"id\" : 0, \"isApproved\" : 3, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"cropId\" : 5, \"updatedBy\" : 1, \"realmId\" : \"realmId\", \"seedQuantity\" : \"seedQuantity\", \"fertilizers\" : \"fertilizers\", \"farmingRegions\" : \"farmingRegions\", \"seedProcurement\" : \"seedProcurement\", \"marketDemand\" : \"marketDemand\", \"diseases\" : \"diseases\", \"irrigationMethods\" : \"irrigationMethods\", \"published\" : true, \"authorId\" : 2, \"approvedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"unspsc\" : \"{}\", \"eppocode\" : \"{}\", \"createdByToolId\" : \"createdByToolId\", \"seedTypes\" : \"seedTypes\", \"weedManagement\" : \"weedManagement\", \"versionId\" : 7, \"soilPreparation\" : \"soilPreparation\", \"createdBy\" : 6, \"nutritionalDetails\" : \"nutritionalDetails\", \"parent_id\" : 9, \"name\" : \"name\", \"time\" : \"2000-01-23T04:56:07.000+00:00\", \"langId\" : 5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/{toolID}/realm/{realmId}/user/{userId}/cropsdetails : Get filtered cropdetails
     *
     * @param realmId  (required)
     * @param userId  (required)
     * @param toolID  (required)
     * @param filter RSQL filter expression (optional)
     * @param page Page number (optional, default to 0)
     * @param size Number of items per page (optional, default to 5)
     * @param sort  (optional, default to name,asc)
     * @return Successful response (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/{toolID}/realm/{realmId}/user/{userId}/cropsdetails",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<CropDetails>> getFilterCropsDetail(
         @PathVariable("realmId") String realmId,
         @PathVariable("userId") Integer userId,
         @PathVariable("toolID") String toolID,
         @Valid @RequestParam(value = "filter", required = false) String filter,
         @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
         @Valid @RequestParam(value = "size", required = false, defaultValue = "5") Integer size,
         @Valid @RequestParam(value = "sort", required = false, defaultValue = "name,asc") String sort,
        final Pageable pageable
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"income\" : \"income\", \"inputCost\" : \"inputCost\", \"lastUpdatedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"machinesRequired\" : \"machinesRequired\", \"approvedBy\" : 2, \"description\" : \"description\", \"updatedByToolId\" : \"updatedByToolId\", \"reviewerRemarks\" : \"reviewerRemarks\", \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"sowingMethod\" : \"sowingMethod\", \"revenue\" : \"revenue\", \"id\" : 0, \"isApproved\" : 3, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"cropId\" : 5, \"updatedBy\" : 1, \"realmId\" : \"realmId\", \"seedQuantity\" : \"seedQuantity\", \"fertilizers\" : \"fertilizers\", \"farmingRegions\" : \"farmingRegions\", \"seedProcurement\" : \"seedProcurement\", \"marketDemand\" : \"marketDemand\", \"diseases\" : \"diseases\", \"irrigationMethods\" : \"irrigationMethods\", \"published\" : true, \"authorId\" : 2, \"approvedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"unspsc\" : \"{}\", \"eppocode\" : \"{}\", \"createdByToolId\" : \"createdByToolId\", \"seedTypes\" : \"seedTypes\", \"weedManagement\" : \"weedManagement\", \"versionId\" : 7, \"soilPreparation\" : \"soilPreparation\", \"createdBy\" : 6, \"nutritionalDetails\" : \"nutritionalDetails\", \"parent_id\" : 9, \"name\" : \"name\", \"time\" : \"2000-01-23T04:56:07.000+00:00\", \"langId\" : 5 }, { \"income\" : \"income\", \"inputCost\" : \"inputCost\", \"lastUpdatedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"machinesRequired\" : \"machinesRequired\", \"approvedBy\" : 2, \"description\" : \"description\", \"updatedByToolId\" : \"updatedByToolId\", \"reviewerRemarks\" : \"reviewerRemarks\", \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"sowingMethod\" : \"sowingMethod\", \"revenue\" : \"revenue\", \"id\" : 0, \"isApproved\" : 3, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"cropId\" : 5, \"updatedBy\" : 1, \"realmId\" : \"realmId\", \"seedQuantity\" : \"seedQuantity\", \"fertilizers\" : \"fertilizers\", \"farmingRegions\" : \"farmingRegions\", \"seedProcurement\" : \"seedProcurement\", \"marketDemand\" : \"marketDemand\", \"diseases\" : \"diseases\", \"irrigationMethods\" : \"irrigationMethods\", \"published\" : true, \"authorId\" : 2, \"approvedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"unspsc\" : \"{}\", \"eppocode\" : \"{}\", \"createdByToolId\" : \"createdByToolId\", \"seedTypes\" : \"seedTypes\", \"weedManagement\" : \"weedManagement\", \"versionId\" : 7, \"soilPreparation\" : \"soilPreparation\", \"createdBy\" : 6, \"nutritionalDetails\" : \"nutritionalDetails\", \"parent_id\" : 9, \"name\" : \"name\", \"time\" : \"2000-01-23T04:56:07.000+00:00\", \"langId\" : 5 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/{toolID}/realm/{realmId}/user/{userId}/cropdetails/{id} : Update a specific cropdetails by ID
     *
     * @param realmId  (required)
     * @param userId  (required)
     * @param toolID  (required)
     * @param id  (required)
     * @param cropDetails  (required)
     * @return Successful update (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/{toolID}/realm/{realmId}/user/{userId}/cropdetails/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CropDetails> updateCropDetailsById(
         @PathVariable("realmId") String realmId,
         @PathVariable("userId") Integer userId,
         @PathVariable("toolID") String toolID,
         @PathVariable("id") Integer id,
         @Valid @RequestBody CropDetails cropDetails
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"income\" : \"income\", \"inputCost\" : \"inputCost\", \"lastUpdatedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"machinesRequired\" : \"machinesRequired\", \"approvedBy\" : 2, \"description\" : \"description\", \"updatedByToolId\" : \"updatedByToolId\", \"reviewerRemarks\" : \"reviewerRemarks\", \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"sowingMethod\" : \"sowingMethod\", \"revenue\" : \"revenue\", \"id\" : 0, \"isApproved\" : 3, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"cropId\" : 5, \"updatedBy\" : 1, \"realmId\" : \"realmId\", \"seedQuantity\" : \"seedQuantity\", \"fertilizers\" : \"fertilizers\", \"farmingRegions\" : \"farmingRegions\", \"seedProcurement\" : \"seedProcurement\", \"marketDemand\" : \"marketDemand\", \"diseases\" : \"diseases\", \"irrigationMethods\" : \"irrigationMethods\", \"published\" : true, \"authorId\" : 2, \"approvedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"unspsc\" : \"{}\", \"eppocode\" : \"{}\", \"createdByToolId\" : \"createdByToolId\", \"seedTypes\" : \"seedTypes\", \"weedManagement\" : \"weedManagement\", \"versionId\" : 7, \"soilPreparation\" : \"soilPreparation\", \"createdBy\" : 6, \"nutritionalDetails\" : \"nutritionalDetails\", \"parent_id\" : 9, \"name\" : \"name\", \"time\" : \"2000-01-23T04:56:07.000+00:00\", \"langId\" : 5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
