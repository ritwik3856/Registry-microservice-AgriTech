/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ninjacart.agri.advisory.fertilizer.controllers;

import com.ninjacart.agri.advisory.fertilizer.models.Fertilizer;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-02-21T18:37:48.249979+05:30[Asia/Kolkata]")
@Validated
@Tag(name = "fertilizer", description = "CRUD operations for fertilizer")
public interface FertilizerApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/v1/{toolID}/realm/{realmId}/user/{userId}/fertilizers : Add a new fertilizer
     *
     * @param realmId  (required)
     * @param userId  (required)
     * @param toolID  (required)
     * @param fertilizer  (required)
     * @return Fertilizer Added (status code 200)
     */
    @Operation(
        operationId = "addFertilizer",
        summary = "Add a new fertilizer",
        tags = { "fertilizer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Fertilizer Added", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Fertilizer.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/{toolID}/realm/{realmId}/user/{userId}/fertilizers",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Fertilizer> addFertilizer(
        @Parameter(name = "realmId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("realmId") String realmId,
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") Integer userId,
        @Parameter(name = "toolID", description = "", required = true, in = ParameterIn.PATH) @PathVariable("toolID") String toolID,
        @Parameter(name = "Fertilizer", description = "", required = true) @Valid @RequestBody Fertilizer fertilizer
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"updatedBy\" : 1, \"is_deleted\" : false, \"createdBy\" : 6, \"name\" : \"name\", \"id\" : 0, \"createdByToolId\" : \"createdByToolId\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"updatedByToolId\" : \"updatedByToolId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/{toolID}/realm/{realmId}/user/{userId}/fertilizers/{id} : Delete a specific fertilizer by ID
     *
     * @param realmId  (required)
     * @param userId  (required)
     * @param toolID  (required)
     * @param id  (required)
     * @return Deleted Successfully (status code 204)
     */
    @Operation(
        operationId = "deleteFertilizerById",
        summary = "Delete a specific fertilizer by ID",
        tags = { "fertilizer" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Deleted Successfully")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/{toolID}/realm/{realmId}/user/{userId}/fertilizers/{id}"
    )
    
    default ResponseEntity<Void> deleteFertilizerById(
        @Parameter(name = "realmId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("realmId") String realmId,
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") Integer userId,
        @Parameter(name = "toolID", description = "", required = true, in = ParameterIn.PATH) @PathVariable("toolID") String toolID,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/{toolID}/realm/{realmId}/user/{userId}/fertilizers/{id} : Get a specific fertilizer by ID
     *
     * @param realmId  (required)
     * @param userId  (required)
     * @param toolID  (required)
     * @param id  (required)
     * @return Successful response (status code 200)
     */
    @Operation(
        operationId = "getFertilizerById",
        summary = "Get a specific fertilizer by ID",
        tags = { "fertilizer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Fertilizer.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/{toolID}/realm/{realmId}/user/{userId}/fertilizers/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Fertilizer> getFertilizerById(
        @Parameter(name = "realmId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("realmId") String realmId,
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") Integer userId,
        @Parameter(name = "toolID", description = "", required = true, in = ParameterIn.PATH) @PathVariable("toolID") String toolID,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"updatedBy\" : 1, \"is_deleted\" : false, \"createdBy\" : 6, \"name\" : \"name\", \"id\" : 0, \"createdByToolId\" : \"createdByToolId\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"updatedByToolId\" : \"updatedByToolId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/{toolID}/realm/{realmId}/user/{userId}/fertilizers/{id} : Update a specific fertilizer by ID
     *
     * @param realmId  (required)
     * @param userId  (required)
     * @param toolID  (required)
     * @param id  (required)
     * @param fertilizer  (required)
     * @return Successful update (status code 200)
     */
    @Operation(
        operationId = "updateFertilizerById",
        summary = "Update a specific fertilizer by ID",
        tags = { "fertilizer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful update", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Fertilizer.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/{toolID}/realm/{realmId}/user/{userId}/fertilizers/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Fertilizer> updateFertilizerById(
        @Parameter(name = "realmId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("realmId") String realmId,
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") Integer userId,
        @Parameter(name = "toolID", description = "", required = true, in = ParameterIn.PATH) @PathVariable("toolID") String toolID,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "Fertilizer", description = "", required = true) @Valid @RequestBody Fertilizer fertilizer
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"updatedBy\" : 1, \"is_deleted\" : false, \"createdBy\" : 6, \"name\" : \"name\", \"id\" : 0, \"createdByToolId\" : \"createdByToolId\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"updatedByToolId\" : \"updatedByToolId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
