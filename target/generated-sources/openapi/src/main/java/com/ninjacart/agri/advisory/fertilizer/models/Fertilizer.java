package com.ninjacart.agri.advisory.fertilizer.models;

import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import java.time.OffsetDateTime;
import java.time.LocalDateTime;
import org.springframework.format.annotation.DateTimeFormat;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * Fertilizer
 */

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-02-21T18:37:48.249979+05:30[Asia/Kolkata]")
@jakarta.persistence.Entity
@jakarta.persistence.Table(
    name = "fertilizer"
  )
public class Fertilizer {

  @jakarta.persistence.Id
@jakarta.persistence.GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
  private Integer id;

  private Integer createdBy;

  @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
  private LocalDateTime createdAt;

  private Integer updatedBy;

  @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
  private LocalDateTime updatedAt;

  private String createdByToolId;

  private String updatedByToolId;

  private String name;

  private Boolean isDeleted = false;

  public Fertilizer() {
    super();
  }

  /**
   * Constructor with only required parameters
   */
  public Fertilizer(String name) {
    this.name = name;
  }

  public Fertilizer id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Autogenerated primary key
   * @return id
  */
  
  @Schema(name = "id", description = "Autogenerated primary key", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("id")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public Fertilizer createdBy(Integer createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
  */
  
  @Schema(name = "createdBy", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("createdBy")
  public Integer getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(Integer createdBy) {
    this.createdBy = createdBy;
  }

  public Fertilizer createdAt(LocalDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
  */
  @Valid 
  @Schema(name = "createdAt", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("createdAt")
  public LocalDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(LocalDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public Fertilizer updatedBy(Integer updatedBy) {
    this.updatedBy = updatedBy;
    return this;
  }

  /**
   * Get updatedBy
   * @return updatedBy
  */
  
  @Schema(name = "updatedBy", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("updatedBy")
  public Integer getUpdatedBy() {
    return updatedBy;
  }

  public void setUpdatedBy(Integer updatedBy) {
    this.updatedBy = updatedBy;
  }

  public Fertilizer updatedAt(LocalDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
  */
  @Valid 
  @Schema(name = "updatedAt", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("updatedAt")
  public LocalDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(LocalDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }

  public Fertilizer createdByToolId(String createdByToolId) {
    this.createdByToolId = createdByToolId;
    return this;
  }

  /**
   * Get createdByToolId
   * @return createdByToolId
  */
  
  @Schema(name = "createdByToolId", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("createdByToolId")
  public String getCreatedByToolId() {
    return createdByToolId;
  }

  public void setCreatedByToolId(String createdByToolId) {
    this.createdByToolId = createdByToolId;
  }

  public Fertilizer updatedByToolId(String updatedByToolId) {
    this.updatedByToolId = updatedByToolId;
    return this;
  }

  /**
   * Get updatedByToolId
   * @return updatedByToolId
  */
  
  @Schema(name = "updatedByToolId", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("updatedByToolId")
  public String getUpdatedByToolId() {
    return updatedByToolId;
  }

  public void setUpdatedByToolId(String updatedByToolId) {
    this.updatedByToolId = updatedByToolId;
  }

  public Fertilizer name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
  */
  @NotNull 
  @Schema(name = "name", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Fertilizer isDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
    return this;
  }

  /**
   * Get isDeleted
   * @return isDeleted
  */
  
  @Schema(name = "is_deleted", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("is_deleted")
  public Boolean getIsDeleted() {
    return isDeleted;
  }

  public void setIsDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Fertilizer fertilizer = (Fertilizer) o;
    return Objects.equals(this.id, fertilizer.id) &&
        Objects.equals(this.createdBy, fertilizer.createdBy) &&
        Objects.equals(this.createdAt, fertilizer.createdAt) &&
        Objects.equals(this.updatedBy, fertilizer.updatedBy) &&
        Objects.equals(this.updatedAt, fertilizer.updatedAt) &&
        Objects.equals(this.createdByToolId, fertilizer.createdByToolId) &&
        Objects.equals(this.updatedByToolId, fertilizer.updatedByToolId) &&
        Objects.equals(this.name, fertilizer.name) &&
        Objects.equals(this.isDeleted, fertilizer.isDeleted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, createdBy, createdAt, updatedBy, updatedAt, createdByToolId, updatedByToolId, name, isDeleted);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Fertilizer {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedBy: ").append(toIndentedString(updatedBy)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    createdByToolId: ").append(toIndentedString(createdByToolId)).append("\n");
    sb.append("    updatedByToolId: ").append(toIndentedString(updatedByToolId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

