/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ninjacart.agri.advisory.seed.controllers;

import com.ninjacart.agri.advisory.seed.models.Seed;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-02-21T18:37:48.181268+05:30[Asia/Kolkata]")
@Validated
@Tag(name = "seed", description = "CRUD operations for seed")
public interface SeedApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/v1/{toolID}/realm/{realmId}/user/{userId}/seeds : Add a new seed
     *
     * @param realmId  (required)
     * @param userId  (required)
     * @param toolID  (required)
     * @param seed  (required)
     * @return Seed Added (status code 200)
     */
    @Operation(
        operationId = "addSeed",
        summary = "Add a new seed",
        tags = { "seed" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Seed Added", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Seed.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/{toolID}/realm/{realmId}/user/{userId}/seeds",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Seed> addSeed(
        @Parameter(name = "realmId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("realmId") String realmId,
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") Integer userId,
        @Parameter(name = "toolID", description = "", required = true, in = ParameterIn.PATH) @PathVariable("toolID") String toolID,
        @Parameter(name = "Seed", description = "", required = true) @Valid @RequestBody Seed seed
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"perAcreCostMin\" : 4, \"produceSize\" : \"produceSize\", \"description\" : \"description\", \"varietyType\" : 2, \"immunity\" : \"immunity\", \"title\" : \"title\", \"updatedByToolId\" : \"updatedByToolId\", \"produceShape\" : \"produceShape\", \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"sowingMethod\" : \"sowingMethod\", \"is_deleted\" : false, \"variety\" : \"variety\", \"sowingTime\" : \"sowingTime\", \"id\" : 0, \"urlStr\" : \"urlStr\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"cropId\" : 5, \"updatedBy\" : 1, \"imageId\" : 5, \"famousFor\" : \"famousFor\", \"firstHarvesting\" : 9, \"perAcreRequirementMin\" : 3, \"seedTreatmentMethods\" : \"seedTreatmentMethods\", \"produceTaste\" : \"produceTaste\", \"createdByToolId\" : \"createdByToolId\", \"plantRowDistance\" : \"plantRowDistance\", \"produceColor\" : \"produceColor\", \"createdBy\" : 6, \"cropDuration\" : 7, \"perAcreRequirementMax\" : 2, \"perAcreCostMax\" : 7, \"name\" : \"name\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/{toolID}/realm/{realmId}/user/{userId}/seeds/{id} : Delete a specific seed by ID
     *
     * @param realmId  (required)
     * @param userId  (required)
     * @param toolID  (required)
     * @param id  (required)
     * @return Deleted Successfully (status code 204)
     */
    @Operation(
        operationId = "deleteSeedById",
        summary = "Delete a specific seed by ID",
        tags = { "seed" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Deleted Successfully")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/{toolID}/realm/{realmId}/user/{userId}/seeds/{id}"
    )
    
    default ResponseEntity<Void> deleteSeedById(
        @Parameter(name = "realmId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("realmId") String realmId,
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") Integer userId,
        @Parameter(name = "toolID", description = "", required = true, in = ParameterIn.PATH) @PathVariable("toolID") String toolID,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/{toolID}/realm/{realmId}/user/{userId}/seeds/{id} : Get a specific seed by ID
     *
     * @param realmId  (required)
     * @param userId  (required)
     * @param toolID  (required)
     * @param id  (required)
     * @return Successful response (status code 200)
     */
    @Operation(
        operationId = "getSeedById",
        summary = "Get a specific seed by ID",
        tags = { "seed" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Seed.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/{toolID}/realm/{realmId}/user/{userId}/seeds/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Seed> getSeedById(
        @Parameter(name = "realmId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("realmId") String realmId,
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") Integer userId,
        @Parameter(name = "toolID", description = "", required = true, in = ParameterIn.PATH) @PathVariable("toolID") String toolID,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"perAcreCostMin\" : 4, \"produceSize\" : \"produceSize\", \"description\" : \"description\", \"varietyType\" : 2, \"immunity\" : \"immunity\", \"title\" : \"title\", \"updatedByToolId\" : \"updatedByToolId\", \"produceShape\" : \"produceShape\", \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"sowingMethod\" : \"sowingMethod\", \"is_deleted\" : false, \"variety\" : \"variety\", \"sowingTime\" : \"sowingTime\", \"id\" : 0, \"urlStr\" : \"urlStr\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"cropId\" : 5, \"updatedBy\" : 1, \"imageId\" : 5, \"famousFor\" : \"famousFor\", \"firstHarvesting\" : 9, \"perAcreRequirementMin\" : 3, \"seedTreatmentMethods\" : \"seedTreatmentMethods\", \"produceTaste\" : \"produceTaste\", \"createdByToolId\" : \"createdByToolId\", \"plantRowDistance\" : \"plantRowDistance\", \"produceColor\" : \"produceColor\", \"createdBy\" : 6, \"cropDuration\" : 7, \"perAcreRequirementMax\" : 2, \"perAcreCostMax\" : 7, \"name\" : \"name\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/{toolID}/realm/{realmId}/user/{userId}/seeds/{id} : Update a specific seed by ID
     *
     * @param realmId  (required)
     * @param userId  (required)
     * @param toolID  (required)
     * @param id  (required)
     * @param seed  (required)
     * @return Successful update (status code 200)
     */
    @Operation(
        operationId = "updateSeedById",
        summary = "Update a specific seed by ID",
        tags = { "seed" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful update", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Seed.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/{toolID}/realm/{realmId}/user/{userId}/seeds/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Seed> updateSeedById(
        @Parameter(name = "realmId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("realmId") String realmId,
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") Integer userId,
        @Parameter(name = "toolID", description = "", required = true, in = ParameterIn.PATH) @PathVariable("toolID") String toolID,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "Seed", description = "", required = true) @Valid @RequestBody Seed seed
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"perAcreCostMin\" : 4, \"produceSize\" : \"produceSize\", \"description\" : \"description\", \"varietyType\" : 2, \"immunity\" : \"immunity\", \"title\" : \"title\", \"updatedByToolId\" : \"updatedByToolId\", \"produceShape\" : \"produceShape\", \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"sowingMethod\" : \"sowingMethod\", \"is_deleted\" : false, \"variety\" : \"variety\", \"sowingTime\" : \"sowingTime\", \"id\" : 0, \"urlStr\" : \"urlStr\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"cropId\" : 5, \"updatedBy\" : 1, \"imageId\" : 5, \"famousFor\" : \"famousFor\", \"firstHarvesting\" : 9, \"perAcreRequirementMin\" : 3, \"seedTreatmentMethods\" : \"seedTreatmentMethods\", \"produceTaste\" : \"produceTaste\", \"createdByToolId\" : \"createdByToolId\", \"plantRowDistance\" : \"plantRowDistance\", \"produceColor\" : \"produceColor\", \"createdBy\" : 6, \"cropDuration\" : 7, \"perAcreRequirementMax\" : 2, \"perAcreCostMax\" : 7, \"name\" : \"name\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
