/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ninjacart.agri.advisory.refdata.controllers;

import com.ninjacart.agri.advisory.refdata.models.EppoCode;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-02-21T18:37:48.349441+05:30[Asia/Kolkata]")
@Validated
@Tag(name = "eppo-codes", description = "CRUD operations for eppo-codes")
public interface EppoCodesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/v1/{toolID}/realm/{realmId}/user/{userId}/eppo-codes : Add new eppo-codes
     *
     * @param realmId  (required)
     * @param userId  (required)
     * @param toolID  (required)
     * @param eppoCode  (required)
     * @return EppoCode Added (status code 200)
     */
    @Operation(
        operationId = "addEppoCode",
        summary = "Add new eppo-codes",
        tags = { "eppo-codes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "EppoCode Added", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EppoCode.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/{toolID}/realm/{realmId}/user/{userId}/eppo-codes",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<EppoCode> addEppoCode(
        @Parameter(name = "realmId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("realmId") String realmId,
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") Integer userId,
        @Parameter(name = "toolID", description = "", required = true, in = ParameterIn.PATH) @PathVariable("toolID") String toolID,
        @Parameter(name = "EppoCode", description = "", required = true) @Valid @RequestBody EppoCode eppoCode
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"identifier\" : \"identifier\", \"country\" : \"country\", \"realmId\" : \"realmId\", \"updatedBy\" : 1, \"code\" : \"code\", \"fullName\" : \"fullName\", \"language\" : \"language\", \"createdByToolId\" : \"createdByToolId\", \"updatedByToolId\" : \"updatedByToolId\", \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"is_deleted\" : false, \"createdBy\" : 6, \"datatype\" : \"datatype\", \"authority\" : \"authority\", \"langNo\" : \"langNo\", \"id\" : 0, \"shortName\" : \"shortName\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/{toolID}/realm/{realmId}/user/{userId}/eppo-codes/{id} : Delete a specific eppo-code by ID
     *
     * @param realmId  (required)
     * @param userId  (required)
     * @param toolID  (required)
     * @param id  (required)
     * @return Deleted Successfully (status code 204)
     */
    @Operation(
        operationId = "deleteEppoCodeById",
        summary = "Delete a specific eppo-code by ID",
        tags = { "eppo-codes" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Deleted Successfully")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/{toolID}/realm/{realmId}/user/{userId}/eppo-codes/{id}"
    )
    
    default ResponseEntity<Void> deleteEppoCodeById(
        @Parameter(name = "realmId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("realmId") String realmId,
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") Integer userId,
        @Parameter(name = "toolID", description = "", required = true, in = ParameterIn.PATH) @PathVariable("toolID") String toolID,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/{toolID}/realm/{realmId}/user/{userId}/eppo-codes/{id} : Get a specific eppo-code by ID
     *
     * @param realmId  (required)
     * @param userId  (required)
     * @param toolID  (required)
     * @param id  (required)
     * @return Successful response (status code 200)
     */
    @Operation(
        operationId = "getEppoCodeById",
        summary = "Get a specific eppo-code by ID",
        tags = { "eppo-codes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EppoCode.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/{toolID}/realm/{realmId}/user/{userId}/eppo-codes/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<EppoCode> getEppoCodeById(
        @Parameter(name = "realmId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("realmId") String realmId,
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") Integer userId,
        @Parameter(name = "toolID", description = "", required = true, in = ParameterIn.PATH) @PathVariable("toolID") String toolID,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"identifier\" : \"identifier\", \"country\" : \"country\", \"realmId\" : \"realmId\", \"updatedBy\" : 1, \"code\" : \"code\", \"fullName\" : \"fullName\", \"language\" : \"language\", \"createdByToolId\" : \"createdByToolId\", \"updatedByToolId\" : \"updatedByToolId\", \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"is_deleted\" : false, \"createdBy\" : 6, \"datatype\" : \"datatype\", \"authority\" : \"authority\", \"langNo\" : \"langNo\", \"id\" : 0, \"shortName\" : \"shortName\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/{toolID}/realm/{realmId}/user/{userId}/eppo-codes : Get filtered eppo-codes
     *
     * @param realmId  (required)
     * @param userId  (required)
     * @param toolID  (required)
     * @param filter RSQL filter expression (optional)
     * @param page Page number (optional, default to 0)
     * @param size Number of items per page (optional, default to 5)
     * @param sort  (optional, default to name,asc)
     * @return Successful response (status code 200)
     */
    @Operation(
        operationId = "getFilterEppoCodes",
        summary = "Get filtered eppo-codes",
        tags = { "eppo-codes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = EppoCode.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/{toolID}/realm/{realmId}/user/{userId}/eppo-codes",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<EppoCode>> getFilterEppoCodes(
        @Parameter(name = "realmId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("realmId") String realmId,
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") Integer userId,
        @Parameter(name = "toolID", description = "", required = true, in = ParameterIn.PATH) @PathVariable("toolID") String toolID,
        @Parameter(name = "filter", description = "RSQL filter expression", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter", required = false) String filter,
        @Parameter(name = "page", description = "Page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "size", description = "Number of items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "5") Integer size,
        @Parameter(name = "sort", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false, defaultValue = "name,asc") String sort
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"identifier\" : \"identifier\", \"country\" : \"country\", \"realmId\" : \"realmId\", \"updatedBy\" : 1, \"code\" : \"code\", \"fullName\" : \"fullName\", \"language\" : \"language\", \"createdByToolId\" : \"createdByToolId\", \"updatedByToolId\" : \"updatedByToolId\", \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"is_deleted\" : false, \"createdBy\" : 6, \"datatype\" : \"datatype\", \"authority\" : \"authority\", \"langNo\" : \"langNo\", \"id\" : 0, \"shortName\" : \"shortName\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"identifier\" : \"identifier\", \"country\" : \"country\", \"realmId\" : \"realmId\", \"updatedBy\" : 1, \"code\" : \"code\", \"fullName\" : \"fullName\", \"language\" : \"language\", \"createdByToolId\" : \"createdByToolId\", \"updatedByToolId\" : \"updatedByToolId\", \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"is_deleted\" : false, \"createdBy\" : 6, \"datatype\" : \"datatype\", \"authority\" : \"authority\", \"langNo\" : \"langNo\", \"id\" : 0, \"shortName\" : \"shortName\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/{toolID}/realm/{realmId}/user/{userId}/eppo-codes/{id} : Update a specific EppoCode by ID
     *
     * @param realmId  (required)
     * @param userId  (required)
     * @param toolID  (required)
     * @param id  (required)
     * @param eppoCode  (required)
     * @return Successful update (status code 200)
     */
    @Operation(
        operationId = "updateEppoCode",
        summary = "Update a specific EppoCode by ID",
        tags = { "eppo-codes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful update", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EppoCode.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/{toolID}/realm/{realmId}/user/{userId}/eppo-codes/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<EppoCode> updateEppoCode(
        @Parameter(name = "realmId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("realmId") String realmId,
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") Integer userId,
        @Parameter(name = "toolID", description = "", required = true, in = ParameterIn.PATH) @PathVariable("toolID") String toolID,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "EppoCode", description = "", required = true) @Valid @RequestBody EppoCode eppoCode
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"identifier\" : \"identifier\", \"country\" : \"country\", \"realmId\" : \"realmId\", \"updatedBy\" : 1, \"code\" : \"code\", \"fullName\" : \"fullName\", \"language\" : \"language\", \"createdByToolId\" : \"createdByToolId\", \"updatedByToolId\" : \"updatedByToolId\", \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"is_deleted\" : false, \"createdBy\" : 6, \"datatype\" : \"datatype\", \"authority\" : \"authority\", \"langNo\" : \"langNo\", \"id\" : 0, \"shortName\" : \"shortName\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
