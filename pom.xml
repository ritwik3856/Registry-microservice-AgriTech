<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<!-- Parent POM: Defines the parent project this POM inherits from -->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.2.1</version>
		<relativePath/>
	</parent>

	<!-- Project coordinates: Unique identifiers for this project and basic information -->
	<groupId>com.ncagriregistry</groupId>
	<artifactId>nc-agri-registry</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>nc-agri-registry</name>
	<description>Registry Project</description>

	<!-- Properties: Used to define project-specific configurations like versions -->
	<properties>
		<java.version>17</java.version>
		<spring-modulith.version>1.1.0</spring-modulith.version>
		<jmolecules-ddd.version>1.4.0</jmolecules-ddd.version>
		<postgres.version>42.7.1</postgres.version>
		<lombok.version>1.18.30</lombok.version>
		<jacoco.version>0.7.7.201606060606</jacoco.version>
	</properties>

	<!-- Dependencies: External libraries or modules this project depends on -->
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

<!--		<dependency>-->
<!--			<groupId>org.hibernate</groupId>-->
<!--			<artifactId>hibernate-core</artifactId>-->
<!--			<version>6.4.4.Final</version>-->
<!--		</dependency>-->

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.modulith</groupId>
			<artifactId>spring-modulith-starter-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.modulith</groupId>
			<artifactId>spring-modulith-starter-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-registry-prometheus</artifactId>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>${postgres.version}</version>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>


		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.modulith</groupId>
			<artifactId>spring-modulith-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.modulith</groupId>
			<artifactId>spring-modulith-events-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
			<version>9.22.3</version>
		</dependency>
		<dependency>
			<groupId>org.jmolecules</groupId>
			<artifactId>jmolecules-ddd</artifactId>
			<version>${jmolecules-ddd.version}</version>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>${lombok.version}</version>
			<scope>provided</scope>
		</dependency>



<!--		KAFKA-->
		<!-- https://mvnrepository.com/artifact/org.apache.kafka/kafka-streams -->
		<dependency>
			<groupId>org.apache.kafka</groupId>
			<artifactId>kafka-streams</artifactId>
			<version>3.6.1</version>
		</dependency>


		<!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-stream -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
			<version>4.1.0</version>
		</dependency>


		<!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-stream-binder-kafka -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream-binder-kafka</artifactId>
			<version>4.1.0</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-stream-binder-kafka-streams -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream-binder-kafka-streams</artifactId>
			<version>4.1.0</version>
		</dependency>


		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-jsr310</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka-test</artifactId>
			<scope>test</scope>
		</dependency>


<!--		<dependency>-->
<!--			<groupId>org.springframework.boot</groupId>-->
<!--			<artifactId>spring-boot-starter-data-elasticsearch</artifactId>-->
<!--		</dependency>-->
		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-elasticsearch</artifactId>
		</dependency>

		<dependency>
			<groupId>org.elasticsearch.client</groupId>
			<artifactId>elasticsearch-rest-high-level-client</artifactId>
			<version>7.17.16</version>
		</dependency>

		<dependency>
			<groupId>org.jooq</groupId>
			<artifactId>jooq</artifactId>
			<version>3.19.3</version>
		</dependency>
		<dependency>
			<groupId>org.jooq</groupId>
			<artifactId>jooq-meta</artifactId>
			<version>3.19.3</version>
		</dependency>
		<dependency>
			<groupId>org.jooq</groupId>
			<artifactId>jooq-codegen</artifactId>
			<version>3.19.3</version>
		</dependency>

		<dependency>
			<groupId>cz.jirutka.rsql</groupId>
			<artifactId>rsql-parser</artifactId>
			<version>2.1.0</version>
		</dependency>

		<dependency>
			<groupId>com.tngtech.archunit</groupId>
			<artifactId>archunit-junit5</artifactId>
			<version>1.2.1</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
			<version>2.3.0</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/io.swagger.core.v3/swagger-annotations -->
		<dependency>
			<groupId>io.swagger.core.v3</groupId>
			<artifactId>swagger-annotations</artifactId>
			<version>2.2.16</version>
		</dependency>

		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
			<version>2.0.1.Final</version>
		</dependency>

		<dependency>
			<groupId>org.openapitools</groupId>
			<artifactId>jackson-databind-nullable</artifactId>
			<version>0.2.6</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/io.springfox/springfox-boot-starter -->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-boot-starter</artifactId>
			<version>3.0.0</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/javax.annotation/javax.annotation-api -->
		<dependency>
			<groupId>javax.annotation</groupId>
			<artifactId>javax.annotation-api</artifactId>
			<version>1.3.2</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/jakarta.validation/jakarta.validation-api -->
		<dependency>
			<groupId>jakarta.validation</groupId>
			<artifactId>jakarta.validation-api</artifactId>
			<version>3.0.2</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>4.0.1</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.hateoas</groupId>
			<artifactId>spring-hateoas</artifactId>
		</dependency>

		<dependency>
			<groupId>org.xmlunit</groupId>
			<artifactId>xmlunit-core</artifactId>
		</dependency>

		<dependency>
			<groupId>org.apache.kafka</groupId>
			<artifactId>kafka-clients</artifactId>
			<version>3.6.1</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.15.3</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
		</dependency>

	</dependencies>

	<!-- Dependency Management: Used to manage versions of dependencies used in child modules -->
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.modulith</groupId>
				<artifactId>spring-modulith-bom</artifactId>
				<version>${spring-modulith.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<!-- Build: Specifies build settings like plugins -->
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>report</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
					<execution>
						<id>jacoco-check</id>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<rules>
								<rule>
									<element>PACKAGE</element>
									<limits>
										<limit>
											<counter>LINE</counter>
											<value>COVEREDRATIO</value>
											<minimum>0.85</minimum> <!-- 85% coverage -->
										</limit>
									</limits>
								</rule>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.jooq</groupId>
				<artifactId>jooq-codegen-maven</artifactId>
				<version>3.19.3</version>
				<executions>
					<execution>
						<id>generate-postgres</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<!-- JDBC connection parameters -->
							<jdbc>
								<driver>org.postgresql.Driver</driver>
								<url>jdbc:postgresql://localhost:5432/registry</url>
								<user>postgres</user>
								<password>123456</password>
							</jdbc>
							<!-- Generator parameters -->
							<generator>
								<database>
									<name>
										org.jooq.meta.postgres.PostgresDatabase
									</name>
									<includes>crop</includes>
									<excludes/>
									<inputSchema>public</inputSchema>
								</database>
								<generate>
									<pojos>true</pojos>
									<pojosEqualsAndHashCode>true</pojosEqualsAndHashCode>
									<javaTimeTypes>true</javaTimeTypes>
									<fluentSetters>true</fluentSetters>
									<!-- Generate the DAO classes -->
									<daos>true</daos>
									<!-- Annotate DAOs (and other types) with spring annotations, such as @Repository and @Autowired
                                         for auto-wiring the Configuration instance, e.g. from Spring Boot's jOOQ starter -->
									<springAnnotations>true</springAnnotations>
									<!-- Generate Spring-specific DAOs containing @Transactional annotations -->
									<springDao>true</springDao>
								</generate>
								<target>
									<packageName>com.ninjacart.agri.advisory.crop.generated</packageName>
									<directory>src/main/java</directory>
								</target>
							</generator>
						</configuration>
					</execution>
				</executions>
			</plugin>


			<plugin>
				<groupId>org.openapitools</groupId>
				<artifactId>openapi-generator-maven-plugin</artifactId>
				<version>7.2.0</version>
				<executions>
					<execution>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<inputSpec>${project.basedir}/src/main/resources/static/crop.yml</inputSpec>
							<generatorName>spring</generatorName>
							<typeMappings>
								<typeMapping>object+pageable=Pageable</typeMapping>
								<typeMapping>object+sort=Sort</typeMapping>
								<typeMapping>OffsetDateTime=LocalDateTime</typeMapping>
								<typeMapping>Long=Short</typeMapping>
							</typeMappings>

							<schemaMappings>
								<schemaMapping>Pageable=org.springframework.data.domain.Pageable</schemaMapping>
								<schemaMapping>Sort=org.springframework.data.domain.Sort</schemaMapping>
								<schemaMapping>UnspscCode=com.ninjacart.agri.advisory.refdata.models.UnspscCode</schemaMapping>
								<schemaMapping>EppoCode=com.ninjacart.agri.advisory.refdata.models.EppoCode</schemaMapping>
							</schemaMappings>

							<importMappings>
								<importMapping>java.time.OffsetDateTime=java.time.LocalDateTime</importMapping>
							</importMappings>

							<configOptions>
								<interfaceOnly>true</interfaceOnly>
								<useTags>true</useTags>
								<hateoas>true</hateoas>

								<generatedConstructorWithRequiredArgs>false</generatedConstructorWithRequiredArgs>

								<additionalModelTypeAnnotations>
									@lombok.AllArgsConstructor;
									@lombok.NoArgsConstructor;
									@lombok.Builder
								</additionalModelTypeAnnotations>

								<documentationProvider>source</documentationProvider>


							</configOptions>

							<packageName>com.ninjacart.agri.advisory</packageName>
							<apiPackage>com.ninjacart.agri.advisory.crop.controllers</apiPackage>
							<modelPackage>com.ninjacart.agri.advisory.crop.models</modelPackage>


						</configuration>
					</execution>

					<execution>
						<id>generate-seed</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<inputSpec>${project.basedir}/src/main/resources/static/seed.yml</inputSpec>
							<generatorName>spring</generatorName>
							<configOptions>
								<interfaceOnly>true</interfaceOnly>
								<useTags>true</useTags>
							</configOptions>
							<packageName>com.ninjacart.agri.advisory</packageName>
							<apiPackage>com.ninjacart.agri.advisory.seed.controllers</apiPackage>
							<modelPackage>com.ninjacart.agri.advisory.seed.models</modelPackage>

							<typeMappings>
								<typeMapping>OffsetDateTime=LocalDateTime</typeMapping>
							</typeMappings>
							<importMappings>
								<importMapping>java.time.OffsetDateTime=java.time.LocalDateTime</importMapping>
							</importMappings>

						</configuration>
					</execution>

					<execution>
						<id>generate-fertilizer</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<inputSpec>${project.basedir}/src/main/resources/static/fertilizer.yml</inputSpec>
							<generatorName>spring</generatorName>
							<configOptions>
								<interfaceOnly>true</interfaceOnly>
								<useTags>true</useTags>
							</configOptions>
							<packageName>com.ninjacart.agri.advisory</packageName>
							<apiPackage>com.ninjacart.agri.advisory.fertilizer.controllers</apiPackage>
							<modelPackage>com.ninjacart.agri.advisory.fertilizer.models</modelPackage>

							<typeMappings>
								<typeMapping>OffsetDateTime=LocalDateTime</typeMapping>
							</typeMappings>
							<importMappings>
								<importMapping>java.time.OffsetDateTime=java.time.LocalDateTime</importMapping>
							</importMappings>

						</configuration>
					</execution>

					<execution>
						<id>generate-pesticide</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<inputSpec>${project.basedir}/src/main/resources/static/pesticide.yml</inputSpec>
							<generatorName>spring</generatorName>
							<configOptions>
								<interfaceOnly>true</interfaceOnly>
								<useTags>true</useTags>


							</configOptions>
							<packageName>com.ninjacart.agri.advisory</packageName>
							<apiPackage>com.ninjacart.agri.advisory.pesticide.controllers</apiPackage>
							<modelPackage>com.ninjacart.agri.advisory.pesticide.models</modelPackage>

							<typeMappings>
								<typeMapping>OffsetDateTime=LocalDateTime</typeMapping>
							</typeMappings>
							<importMappings>
								<importMapping>java.time.OffsetDateTime=java.time.LocalDateTime</importMapping>
							</importMappings>

						</configuration>
					</execution>

					<execution>
						<id>generate-refdata</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<inputSpec>${project.basedir}/src/main/resources/static/refdata.yml</inputSpec>
							<generatorName>spring</generatorName>
							<configOptions>
								<interfaceOnly>true</interfaceOnly>
								<useTags>true</useTags>


							</configOptions>
							<packageName>com.ninjacart.agri.advisory</packageName>
							<apiPackage>com.ninjacart.agri.advisory.refdata.controllers</apiPackage>
							<modelPackage>com.ninjacart.agri.advisory.refdata.models</modelPackage>

							<typeMappings>
								<typeMapping>OffsetDateTime=LocalDateTime</typeMapping>
							</typeMappings>
							<importMappings>
								<importMapping>java.time.OffsetDateTime=java.time.LocalDateTime</importMapping>
							</importMappings>

						</configuration>
					</execution>

				</executions>

			</plugin>

		</plugins>
	</build>

</project>
